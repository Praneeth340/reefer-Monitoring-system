/* USER CODE BEGIN Header */
/* May 10 2020*/
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "UartRingbuffer.h"
#include <string.h>
#include <stdio.h>
#include "stdlib.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */
void lcd_lower_nibble(unsigned char data);
void lcd_upper_nibble(unsigned char data);
void lcd_init(void);
void lcd_write_data(unsigned char data);
void lcd_write_cmd(unsigned char);
void lcd_string(unsigned char* str);
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


#define MASTER_REQ_READ_MQ135   0x01
#define MASTER_REQ_READ_DHT11   0x02
#define SLAVE_ADDRESS_2 0x27
#define SLAVE_ADDRESS 0x08
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t transferRequest;
uint8_t adcVal0[2];
uint16_t adcVal1;
uint8_t TEMP;
uint8_t RH;
char gas1[10];
char temp1[10];
char rh1[10];

/* USER CODE END 0 */
char buffer[56];
unsigned char* arrayOfString[9];
	  const char dem[] = ",";
	  char *token;
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  lcd_init();
    HAL_Delay(100);
   /* USER CODE BEGIN 2 */
 Ringbuf_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		lcd_init ();
				  	  lcd_write_string("CONNECTING TO ");
				  		  	lcd_write_cmd(0xC0);
				  		  lcd_write_string("MQ135");
				  		  	HAL_Delay(1000);


				  		  		  transferRequest =  MASTER_REQ_READ_MQ135;
				  		  		  	  	    	do{
				  		  		  	  	    		while(HAL_I2C_Master_Transmit(&hi2c2, (uint8_t)SLAVE_ADDRESS, (uint8_t*)&transferRequest, 1, 1000)!= HAL_OK){}
				  		  		  	  	    		while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
				  		  		  	  	    	   }while (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF);
				  		  		  	  	  	     while (HAL_I2C_Master_Receive(&hi2c2, (uint8_t)SLAVE_ADDRESS, (uint8_t*)&adcVal0, 2, 1000) != HAL_OK){}
				  		  		  	  	  	     while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
				  		  		  	 	  		  adcVal1= (adcVal0[1] << 8) | adcVal0[0];
				  		  		  	 	  	  lcd_init ();
				  		  		  	 	lcd_write_string("CONNECTION");
				  		  		  	 	  		       lcd_write_cmd(0xC0);
				  		  		  	 	  		lcd_write_string("SUCCESSFUL");
				  		  		  	 	  		       HAL_Delay(1000);
				  		  		  	 	  		          lcd_init();
				  		  		  	 	  		 lcd_write_string("GAS: ");
				  		  		  	 	  		 	  itoa(adcVal1,gas1,10);
				  		  		  	 	  		          lcd_write_cmd(0x84);
				  		  		  	 	  		 lcd_write_string(gas1);
				  		  		  	 	  		 	 HAL_Delay(4000);
				  		  		  	 	  	lcd_init ();
				  		  		  	 	lcd_write_string("CONNECTING TO");
				  		  		  	 	  	lcd_write_cmd(0xC0);
				  		  		  	 	lcd_write_string("DHT11");
				  		  		  	 	  	HAL_Delay(1000);


				  		  		  	 	 transferRequest =  MASTER_REQ_READ_DHT11;
				  		  		  	 		  	  		   	   do{
				  		  		  	 		  	  		   	  	   while(HAL_I2C_Master_Transmit(&hi2c2, (uint8_t)SLAVE_ADDRESS_2, (uint8_t*)&transferRequest, 1, 1000)!= HAL_OK){}
				  		  		  	 		  	  		   	  	   while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
				  		  		  	 		  	  		   	     } while (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF);
				  		  		  	 		  	  		 	   while (HAL_I2C_Master_Receive(&hi2c2, (uint8_t)SLAVE_ADDRESS_2, (uint8_t*)&TEMP, 1, 1000) != HAL_OK){}
				  		  		  	 		  	  		 	   while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
				  		  		  	 		  	  		 	   while (HAL_I2C_Master_Receive(&hi2c2, (uint8_t)SLAVE_ADDRESS_2, (uint8_t*)&RH, 1, 1000) != HAL_OK){}
				  		  		  	 		  	  		 	   while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY){}
				  		  		  	 		  	  		lcd_init ();
				  		  		  	 		  	lcd_write_string("CONNECTION");
				  		  		  	 		  	  			 	lcd_write_cmd(0xC0);
				  		  		  	 		  	  		lcd_write_string("SUCCESSFUL");
				  		  		  	 		  	  			 	HAL_Delay(1000);
				  		  		  	 		  	  			        lcd_init();
				  		  		  	 		  	  			lcd_write_string("TEMP:");
				  		  		  	 		  	  			        lcd_write_cmd(0xC0);
				  		  		  	 		  	  			lcd_write_string("RH:");
				  		  		  	 		  	  			 	itoa(TEMP,temp1,10);
				  		  		  	 		  	  			 	itoa(RH,rh1,10);
				  		  		  	 		  	  			 	lcd_write_cmd(0x85);
				  		  		  	 		  	  		lcd_write_string(temp1);
				  		  		  	 		  	  			        lcd_write_cmd(0xC3);
				  		  		  	 		  	  			lcd_write_string(rh1);
				  		  		  	 		  	  			 	HAL_Delay(4000);
	  if (IsDataAvailable())
		  	  {
		  	Get_after("$GIRMC,", 56, buffer);
		  	  }

		  int i=0;
		   /* get the first token */
		   token = strtok(buffer, dem);

		   /* walk through other tokens */
		   while( token != NULL )
		   {
		      arrayOfString[i] = token;
		      token = strtok(NULL, dem);
		      i++;
		   }
		  HAL_Delay(1000);
			lcd_init ();
		  unsigned char* str1={"UTC Time :"};
		  	  	  lcd_write_string(str1);
		  	  	  lcd_write_cmd(0xC0);
		  	  	  HAL_Delay(100);
		  	  	  lcd_write_string(arrayOfString[0]);
		  	  	  HAL_Delay(10000);
		  	  lcd_write_cmd(0x01);
		  	  HAL_Delay(100);

		  	  unsigned char* str2={"Latitude :"};
		  	  lcd_write_string(str2);
		  	  lcd_write_cmd(0xC0);
		  	  HAL_Delay(100);
		  	  lcd_write_string(arrayOfString[2]);
		  	  lcd_write_data("N");
		  	  HAL_Delay(10000);
		  	  lcd_write_cmd(0x01);
		  	  HAL_Delay(100);

		  	  unsigned char* str3={"Longitude :"};
		  	  lcd_write_string(str3);
		  	  lcd_write_cmd(0xC0);
		  	  HAL_Delay(100);
		  	  lcd_write_string(arrayOfString[4]);
		  	  lcd_write_data("E");
		  	  HAL_Delay(10000);
		  	  lcd_write_cmd(0x01);
		  	  HAL_Delay(100);

		  	  unsigned char* str4={"UTC Date :"};
		  	  lcd_write_string(str4);
		  	  lcd_write_cmd(0xC0);
		  	  HAL_Delay(100);
		  	  lcd_write_string(arrayOfString[8]);
		  	  HAL_Delay(10000);
		  	  lcd_write_cmd(0x01);
		  	  	  HAL_Delay(1000);


    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
void lcd_upper_nibble(unsigned char data){

	if ( data & 0x10 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
	}
	if ( data & 0x20 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	}
	if ( data & 0x40 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
	}
	if ( data & 0x80 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
	}

    /* set the EN signal */
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);

    /* wait */
   HAL_Delay(1);

    /* reset the EN signal */
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);

    HAL_Delay(2);
}


void lcd_lower_nibble(unsigned char data){

	if ( data & 0x01 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
	}
	if ( data & 0x02 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	}
	if ( data & 0x04 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
	}
	if ( data & 0x08 ) {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
	}

    /* set the EN signal */
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);

    /* wait */
   HAL_Delay(1);

    /* reset the EN signal */
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);

    HAL_Delay(2);
}

void lcd_init(void){

	HAL_Delay(1);
	/* clear control bits */
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);


		/* wait initial delay for LCD to settle */
	  /* reset procedure - 3 function calls resets the device */
	HAL_Delay(200);


	  lcd_write_cmd(0x28);// function set Display on 4 bit 2 line display font 0
          HAL_Delay(50);
	  lcd_write_cmd(0x0F); // Display on
	  HAL_Delay(50);
	  lcd_write_cmd(0x06);//
	  HAL_Delay(50);
	  lcd_write_cmd(0x02);
	  HAL_Delay(50);
	  lcd_write_cmd(0x01);
	 HAL_Delay(50);
}

void lcd_write_cmd(unsigned char data){
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
	lcd_upper_nibble(data);
	lcd_lower_nibble(data);
	HAL_Delay(2);
}

void lcd_write_data(unsigned char data){
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
	lcd_upper_nibble(data);
	lcd_lower_nibble(data);
	HAL_Delay(2);
}

void lcd_write_string(unsigned char* str) // Function to send data to string
{
int i=0;
while(str[i]!='\0')
{
  lcd_write_data(str[i]);
  i++;
  HAL_Delay(10);
}
}
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB3 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
